/* tslint:disable */
import { Injectable } from '@angular/core';
import { Headers, Http, Response, URLSearchParams } from '@angular/http';

import { Observable } from 'rxjs/Observable';

import { Config } from '../config';
import { HttpRestJsonService } from '../core';
import { ObjectExtraOptions } from '../core/http/http-rest-json.service';

// import { {{#definitions}}{{name}}{{^last}}, {{/last}}{{/definitions}} } from './models';
import RequestGen from './models';

@Injectable()
export class KBOnlineService {
  protected url: string;
  private _kbOnline:apigen.RequestGen = new apigen.RequestGen();

  constructor(private config: Config, protected http: HttpRestJsonService<any>) {
    // get url from config service
    {{#domain}}
    this.url = config.getVal('kbOnline.apiUrl') || '{{&.}}';
    {{/domain}}
    {{^domain}}
    this.url = config.getVal('kbOnline.apiUrl') || "http://localhost:8080/kb-online";
    {{/domain}}

    {{!-- #isSecure}}
      this.token = (typeof options === 'object') ? (options.token ? options.token : {}) : {};
    {{/isSecure --}}
  }

  get kbOnline():apigen.RequestGen {
    return this._kbOnline;
  }

  //pridano z duvodu unit-testu
  set kbOnline(kbOnlineModel:apigen.RequestGen){
    this._kbOnline = kbOnlineModel;
  }

  successCallback = (response) => {
    return response.headers.get('Location').replace(/.*\//, '');
  }

  postRequest(): Observable<any> {
    let headers = new Headers();
    headers.append('Content-Type', 'application/json;charset=UTF-8');
    headers.append('applicationId', '1');

    let kbOnlineRequestOption:ObjectExtraOptions<any> = {
      headers : headers,
      successCallback : this.successCallback
    }

    const url = `${this.url}/requests`;
    return this.http.addObject(url, this.kbOnline , kbOnlineRequestOption )
      .do( requestId => console.log(requestId));

  }

{{#methods}}
	/**
	{{#summaryLines}}
  * {{&.}}
  {{/summaryLines}}
  *
	* @method
	* @name {{&methodName}}
	{{#parameters}}
	{{^isSingleton}}* @param {{&type}} {{&camelCaseName}} - {{&description}}{{/isSingleton}}
	{{/parameters}}
	*
	*/
	public {{&methodName}}({{#parameters}}{{&camelCaseName}}: {{typescriptType}}{{^last}}, {{/last}}{{/parameters}}) {
		let payload = {};
		let queryParameters = {};
		let headers = new Headers();
		headers.append('Content-Type', 'application/json');

{{#parameters}}
			{{#isQueryParameter}}
			  {{#isSingleton}}
		queryParameters['{{&name}}'] = '{{&singleton}}';
        {{/isSingleton}}

			  {{^isSingleton}}
			    {{^isPatternType}}
		if({{&camelCaseName}} !== undefined){
			queryParameters['{{&name}}'] = {{&camelCaseName}};
		}
          {{/isPatternType}}
        {{/isSingleton}}
			{{/isQueryParameter}}

			{{#isHeaderParameter}}
			  {{#isSingleton}}
		headers.append('{{&name}}', '{{&singleton}}');
        {{/isSingleton}}
        {{^isSingleton}}
		if({{&camelCaseName}} !== undefined){
			headers.append('{{&name}}', {{&camelCaseName}});
		}
        {{/isSingleton}}
			{{/isHeaderParameter}}
			{{#isBodyParameter}}
		payload['{{&name}}'] = {{&camelCaseName}};
			{{/isBodyParameter}}
			{{#isFormParameter}}
			  {{#isSingleton}}
		form['{{&name}}'] = '{{&singleton}}';
        {{/isSingleton}}
        {{^isSingleton}}
		if({{&camelCaseName}} !== undefined){
			form['{{&name}}'] = {{&camelCaseName}};
		}
			  {{/isSingleton}}
			{{/isFormParameter}}
{{/parameters}}
		let uri = `{{&backTickPath}}`;

		return this.http[methodFun['{{angular2httpMethod}}']]()
			.(this.url + uri{{#hasPayload}}, JSON.stringify({{#parameters}}{{#isBodyParameter}}{{&camelCaseName}}{{/isBodyParameter}}{{/parameters}}){{/hasPayload}}, { headers: headers })
			.map((res: Response) => {
        return res;
      });
	}

{{/methods}}

}
